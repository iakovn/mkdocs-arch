@startuml frontend-flow
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Dynamic.puml

LAYOUT_WITH_LEGEND()

title Dynamic Diagram - Simulation Submission Flow (Frontend Focus)

Person(researcher, "Researcher", "System user")

Container_Boundary(frontend, "Vue.js Frontend") {
    Component(view, "SimulationSubmitView", "Vue Component", "View for submitting simulations")
    Component(form, "SimulationForm", "Vue Component", "Reusable form with validation")
    Component(composable, "useSimulation()", "Composable", "Reactive simulation operations")
    Component(store, "SimulationStore", "Pinia Store", "State management for simulations")
    Component(service, "SimulationService", "Service", "Translates domain to/from DTO")
    Component(client, "ApiClient", "HTTP Client", "Makes authenticated API calls")
}

Container(api, "API Backend", "Go", "Backend application")
ContainerDb(db, "Database", "PostgreSQL", "Simulation data store")
System_Ext(queue, "Queue System", "Machinery/Lambda", "Task execution")

Rel_D(researcher, view, "1. Fills form and clicks Submit", "User Input")
Rel_D(view, form, "2. Trigger form validation", "v-on:submit")
Rel_L(form, form, "3. Validate SimulationParameters", "")
Rel_U(form, view, "4. Emit submit event", "@submit")

Rel_R(view, composable, "5. submitSimulation(params)", "")
Rel_L(composable, composable, "6. Create & validate Simulation", "")
Rel_D(composable, store, "7. Dispatch action", "")
Rel_L(store, store, "8. Set loading state", "")

Rel_D(store, service, "9. submit(simulation)", "")
Rel_D(service, service, "10. Transform to DTO", "")
Rel_R(service, client, "11. post('/simulations')", "")
Rel_L(client, client, "12. Add auth headers", "")

Rel_D(client, api, "13. POST /api/v1/simulations", "JSON/HTTPS")
Rel_D(api, db, "14. Save metadata", "SQL")
Rel_D(api, queue, "15. Enqueue", "")

Rel_L(api, client, "16. Return SimulationDTO", "201")
Rel_L(client, service, "17. Promise resolves", "")
Rel_D(service, service, "18. fromDTO()", "")
Rel_L(service, store, "19. Return Simulation", "")

Rel_L(store, store, "20. Update state", "")
Rel_L(store, store, "21. Clear loading", "")
Rel_U(store, composable, "22. Reactive update", "")
Rel_L(composable, view, "23. State propagates", "")

Rel_L(view, view, "24. Update UI", "")
Rel_U(view, researcher, "25. Show notification & navigate", "")

note right of view
  **View Layer**
  - Handles user interaction
  - Displays validation errors
  - Shows loading state
  - Manages UI feedback
end note

note right of composable
  **Composable Layer**
  - Reactive state (isLoading)
  - Business logic
  - Error handling
  - Domain model creation
end note

note right of store
  **State Management**
  - Optimistic UI updates
  - Loading states
  - Error states
  - Cache simulation data
end note

note right of service
  **Service Layer (Adapter)**
  Translates between:
  - Domain model (Simulation)
  - API DTO (SimulationDTO)
  Isolates API changes
end note

note bottom of api
  **Key Architectural Points:**
  1. Consistent terminology: "Simulation" at every layer
  2. Clear separation of concerns
  3. Adapter pattern for API translation
  4. Vue reactivity for state propagation
  5. Type safety with TypeScript
  6. Each layer independently testable
end note

SHOW_LEGEND()
@enduml