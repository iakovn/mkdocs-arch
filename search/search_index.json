{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"MkDocs Architecture Documentation","text":"<p>Document Version: v1.4.1</p>"},{"location":"#overview","title":"Overview","text":"<p>The documentation examples are only present for demonstration purposes. Most of the content is AI generated and does not represent any real system or working architecture.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with the documentation, you can navigate through the sections listed in the sidebar. The main sections include:</p> <ul> <li>ADR: ADR index page.</li> <li>Architecture: Generic architectural documentation with   PlantUML.</li> <li>C4 Example with PlantUML: C4 diagrams example with   PlantUML.</li> <li>C4 Example with basic Mermaid: C4 diagrams   example with basic Mermaid.</li> <li>C4 Example with experimental Mermaid: C4   diagrams example with experimental Mermaid.</li> <li> <p>C4 System Landscape with Mermaid: A larger   document including System Landscape diagram with Mermaid.</p> </li> <li> <p>Diagrams: Visual representations of the   architecture using PlantUML.</p> </li> </ul>"},{"location":"#extra-topics","title":"Extra topics","text":"<ul> <li>TBD: TBD Feature lifecycle.</li> </ul>"},{"location":"adr/","title":"Architecture Decision Records","text":"<ul> <li>0000 use markdown architectural decision records</li> <li>0001 use mkdocs and c4 diagrams</li> <li>0002 adopt trunk based development as branching strategy</li> <li>README</li> <li>adr template</li> </ul>"},{"location":"architecture/","title":"Architectural Documentation","text":"<p>This document outlines the architecture of the system, detailing its components, their interactions, and the overall design principles.</p>"},{"location":"architecture/#system-overview","title":"System Overview","text":"<p>The system is designed to provide a robust solution for [insert purpose or functionality here]. It consists of several key components that work together to achieve the desired outcomes.</p>"},{"location":"architecture/#components","title":"Components","text":""},{"location":"architecture/#component-1-name","title":"Component 1: [Name]","text":"<ul> <li>Description: [Brief description of the component]</li> <li>Responsibilities: [List of responsibilities]</li> <li>Interactions: [How it interacts with other components]</li> </ul>"},{"location":"architecture/#component-2-name","title":"Component 2: [Name]","text":"<ul> <li>Description: [Brief description of the component]</li> <li>Responsibilities: [List of responsibilities]</li> <li>Interactions: [How it interacts with other components]</li> </ul>"},{"location":"architecture/#architectural-diagram","title":"Architectural Diagram","text":""},{"location":"architecture/#design-principles","title":"Design Principles","text":"<ul> <li>Scalability: [Explanation of how the architecture supports scalability]</li> <li>Maintainability: [Explanation of how the architecture supports maintainability]</li> <li>Performance: [Explanation of how the architecture supports performance]</li> </ul>"},{"location":"architecture/#conclusion","title":"Conclusion","text":"<p>This architectural documentation serves as a guide for understanding the system's structure and design. Further details can be found in the accompanying diagrams and documentation.</p>"},{"location":"simulationQueueC4/","title":"Example C4 Diagrams built with PlantUML","text":""},{"location":"simulationQueueC4/#c1-context","title":"C1 Context","text":""},{"location":"simulationQueueC4/#c2-container","title":"C2 Container","text":""},{"location":"simulationQueueC4/#c3-component","title":"C3 Component","text":""},{"location":"simulationQueueC4/#c4-code","title":"C4 Code","text":""},{"location":"simulationQueueC4Mermaid/","title":"Simulation Job Queue System - Architecture Diagrams","text":""},{"location":"simulationQueueC4Mermaid/#1-system-context-diagram-c1","title":"1. System Context Diagram (C1)","text":"<pre><code>graph TB\n    subgraph External Users\n        Researcher[\ud83d\udc64 Researcher&lt;br/&gt;Submits and monitors simulations]\n        Admin[\ud83d\udc64 System Administrator&lt;br/&gt;Manages configuration]\n    end\n\n    SimSystem[\ud83c\udfaf Simulation System&lt;br/&gt;Manages simulation jobs with&lt;br/&gt;consistent terminology]\n\n    subgraph External Systems\n        Machinery[\u2699\ufe0f Machinery Queue&lt;br/&gt;Distributed task queue]\n        Lambda[\u2601\ufe0f AWS Lambda&lt;br/&gt;Serverless compute]\n        SQS[\ud83d\udcec AWS SQS&lt;br/&gt;Message queue]\n        Redis[\ud83d\udcbe Redis&lt;br/&gt;In-memory store]\n        Monitoring[\ud83d\udcca Monitoring&lt;br/&gt;Prometheus/Grafana]\n    end\n\n    Researcher --&gt;|HTTPS| SimSystem\n    Admin --&gt;|HTTPS| SimSystem\n    SimSystem --&gt;|Machinery Protocol| Machinery\n    SimSystem --&gt;|AWS SDK| Lambda\n    SimSystem --&gt;|AWS API| SQS\n    Machinery --&gt;|Redis Protocol| Redis\n    SimSystem --&gt;|Metrics| Monitoring\n\n    style SimSystem fill:#d4edda,stroke:#28a745,stroke-width:3px\n    style Machinery fill:#f8d7da,stroke:#721c24,stroke-width:2px\n    style Lambda fill:#f8d7da,stroke:#721c24,stroke-width:2px\n    style SQS fill:#f8d7da,stroke:#721c24,stroke-width:2px\n    style Redis fill:#f8d7da,stroke:#721c24,stroke-width:2px\n    style Monitoring fill:#f8d7da,stroke:#721c24,stroke-width:2px\n</code></pre>"},{"location":"simulationQueueC4Mermaid/#2-container-diagram-c2","title":"2. Container Diagram (C2)","text":"<pre><code>graph TB\n    Researcher[\ud83d\udc64 Researcher]\n\n    subgraph SimSystem[Simulation System]\n        SPA[\ud83d\udcf1 Web Application&lt;br/&gt;Vue.js SPA&lt;br/&gt;Uses 'Simulation' terminology]\n        Docs[\ud83d\udcc4 Documentation&lt;br/&gt;User Manual&lt;br/&gt;Ubiquitous Language]\n        API[\u2699\ufe0f API Application&lt;br/&gt;Go&lt;br/&gt;Ports &amp; Adapters]\n        Domain[\ud83c\udfaf Domain Core&lt;br/&gt;Go&lt;br/&gt;Pure business logic]\n        DB[(\ud83d\udcbe Database&lt;br/&gt;PostgreSQL&lt;br/&gt;Simulation metadata)]\n    end\n\n    subgraph External[External Systems]\n        Machinery[\u2699\ufe0f Machinery&lt;br/&gt;+ Redis]\n        Lambda[\u2601\ufe0f AWS Lambda&lt;br/&gt;+ SQS]\n    end\n\n    Researcher --&gt;|HTTPS| SPA\n    Researcher --&gt;|Reads| Docs\n    SPA --&gt;|JSON/HTTPS&lt;br/&gt;Simulation API| API\n    API --&gt;|Uses| Domain\n    API --&gt;|SQL/TLS| DB\n    API --&gt;|MachineryAdapter| Machinery\n    API --&gt;|LambdaAdapter| Lambda\n\n    style Domain fill:#d4edda,stroke:#28a745,stroke-width:3px\n    style SPA fill:#e8f4f8,stroke:#2c5aa0,stroke-width:2px\n    style API fill:#e8f4f8,stroke:#2c5aa0,stroke-width:2px\n    style Machinery fill:#f8d7da,stroke:#721c24,stroke-width:2px\n    style Lambda fill:#f8d7da,stroke:#721c24,stroke-width:2px\n</code></pre>"},{"location":"simulationQueueC4Mermaid/#3-backend-component-diagram-c3","title":"3. Backend Component Diagram (C3)","text":"<pre><code>graph TB\n    SPA[\ud83d\udcf1 Vue.js Frontend]\n\n    subgraph API[API Application - Go Backend]\n        subgraph Primary[Primary Adapters - Driving]\n            Router[HTTP Router&lt;br/&gt;net/http]\n            Middleware[Auth Middleware]\n            Handler[SimulationHandler&lt;br/&gt;HTTP \u2192 Domain]\n        end\n\n        subgraph Ports[Port Interfaces]\n            ServicePort[SimulationService&lt;br/&gt;interface - Primary Port]\n            QueuePort[SimulationQueue&lt;br/&gt;interface - Secondary Port]\n            RepoPort[SimulationRepository&lt;br/&gt;interface - Secondary Port]\n        end\n\n        subgraph DomainLayer[Domain Layer - Core Business Logic]\n            Aggregate[Simulation Aggregate&lt;br/&gt;Entity + Value Objects]\n            Scheduler[SimulationScheduler&lt;br/&gt;Domain Service]\n            Validator[SimulationValidator&lt;br/&gt;Domain Service]\n        end\n\n        subgraph Secondary[Secondary Adapters - Driven]\n            MachineryAdapter[MachinerySimulationQueue&lt;br/&gt;Translates to Task]\n            LambdaAdapter[LambdaSimulationQueue&lt;br/&gt;Translates to Event]\n            PGAdapter[PostgresSimulationRepo&lt;br/&gt;SQL Implementation]\n        end\n    end\n\n    subgraph External[External Systems]\n        Machinery[\u2699\ufe0f Machinery&lt;br/&gt;Task Queue]\n        Lambda[\u2601\ufe0f AWS Lambda]\n        DB[(\ud83d\udcbe PostgreSQL)]\n    end\n\n    SPA --&gt; Router\n    Router --&gt; Middleware\n    Middleware --&gt; Handler\n    Handler --&gt; ServicePort\n    ServicePort --&gt; Aggregate\n    ServicePort --&gt; Scheduler\n    ServicePort --&gt; Validator\n    ServicePort --&gt; QueuePort\n    ServicePort --&gt; RepoPort\n    QueuePort -.implements.-&gt; MachineryAdapter\n    QueuePort -.implements.-&gt; LambdaAdapter\n    RepoPort -.implements.-&gt; PGAdapter\n    MachineryAdapter --&gt; Machinery\n    LambdaAdapter --&gt; Lambda\n    PGAdapter --&gt; DB\n\n    style DomainLayer fill:#d4edda,stroke:#28a745,stroke-width:3px\n    style Ports fill:#fff3cd,stroke:#856404,stroke-width:2px\n    style Primary fill:#cce5ff,stroke:#004085,stroke-width:2px\n    style Secondary fill:#cce5ff,stroke:#004085,stroke-width:2px\n</code></pre>"},{"location":"simulationQueueC4Mermaid/#4-frontend-component-diagram-detailed-c3","title":"4. Frontend Component Diagram - Detailed (C3)","text":"<pre><code>graph TB\n    User[\ud83d\udc64 Researcher]\n\n    subgraph VueSPA[Vue.js Frontend Application]\n        subgraph Views[Views - Pages]\n            ListView[SimulationListView&lt;br/&gt;List all simulations]\n            DetailView[SimulationDetailView&lt;br/&gt;Simulation details]\n            SubmitView[SimulationSubmitView&lt;br/&gt;Submit new simulation]\n            Dashboard[DashboardView&lt;br/&gt;Overview &amp; stats]\n        end\n\n        subgraph Components[Reusable Components]\n            Card[SimulationCard&lt;br/&gt;Display summary]\n            Form[SimulationForm&lt;br/&gt;Input with validation]\n            Status[SimulationStatusBadge&lt;br/&gt;Visual status]\n            Table[SimulationTable&lt;br/&gt;Sortable table]\n        end\n\n        subgraph Composables[Composables - Vue 3]\n            UseSimulation[useSimulation&lt;br/&gt;Submit, cancel, refresh]\n            UseList[useSimulationList&lt;br/&gt;Fetch, filter, sort]\n            UseAuth[useAuth&lt;br/&gt;Authentication]\n            UseNotify[useNotification&lt;br/&gt;Toast messages]\n        end\n\n        subgraph StateManagement[State Management - Pinia]\n            SimStore[SimulationStore&lt;br/&gt;Actions, Getters, State]\n            AuthStore[AuthStore&lt;br/&gt;Auth state]\n            UIStore[UIStore&lt;br/&gt;Loading, errors]\n        end\n\n        subgraph Services[Services Layer - Adapters]\n            SimService[SimulationService&lt;br/&gt;DTO \u2194 Domain translation]\n            AuthService[AuthService&lt;br/&gt;Token management]\n            ApiClient[ApiClient&lt;br/&gt;HTTP wrapper]\n        end\n\n        subgraph Models[Domain Models - Frontend]\n            SimModel[Simulation&lt;br/&gt;TypeScript Interface]\n            ParamsModel[SimulationParameters&lt;br/&gt;Value Object]\n            StatusModel[SimulationStatus&lt;br/&gt;Enum: PENDING, RUNNING...]\n        end\n    end\n\n    Backend[\u2699\ufe0f Go API Backend]\n\n    User --&gt; ListView\n    User --&gt; SubmitView\n    ListView --&gt; Table\n    ListView --&gt; Card\n    SubmitView --&gt; Form\n    DetailView --&gt; Status\n\n    ListView --&gt; UseList\n    SubmitView --&gt; UseSimulation\n    DetailView --&gt; UseSimulation\n\n    UseSimulation --&gt; SimStore\n    UseList --&gt; SimStore\n    UseAuth --&gt; AuthStore\n\n    SimStore --&gt; SimService\n    AuthStore --&gt; AuthService\n    SimService --&gt; ApiClient\n    AuthService --&gt; ApiClient\n\n    SimService --&gt; SimModel\n    SimStore --&gt; SimModel\n    SimModel --&gt; ParamsModel\n    SimModel --&gt; StatusModel\n\n    ApiClient --&gt; Backend\n\n    style Models fill:#d4edda,stroke:#28a745,stroke-width:3px\n    style Services fill:#cce5ff,stroke:#004085,stroke-width:2px\n    style StateManagement fill:#fff3cd,stroke:#856404,stroke-width:2px\n    style Composables fill:#e8f4f8,stroke:#2c5aa0,stroke-width:2px\n</code></pre>"},{"location":"simulationQueueC4Mermaid/#5-frontend-code-structure-simulationsubmitview","title":"5. Frontend Code Structure - SimulationSubmitView","text":"<pre><code>graph TB\n    subgraph Component[SimulationSubmitView.vue - Single File Component]\n        subgraph Template[Template Section]\n            HTML[&lt;template&gt;&lt;br/&gt;Declarative UI markup]\n            FormUsage[&lt;SimulationForm&gt;&lt;br/&gt;Component instance]\n            NotifUsage[&lt;NotificationToast&gt;&lt;br/&gt;Notifications]\n        end\n\n        subgraph Script[Script Section - Composition API]\n            Imports[Import statements&lt;br/&gt;Dependencies]\n            ComposableSetup[Setup composables&lt;br/&gt;useSimulation, useNotification]\n            ReactiveState[Reactive state&lt;br/&gt;ref, reactive]\n            ComputedProps[Computed properties&lt;br/&gt;canSubmit, isFormValid]\n            Methods[Methods&lt;br/&gt;handleSubmit, validateForm]\n            Lifecycle[Lifecycle hooks&lt;br/&gt;onMounted, onUnmounted]\n            Watchers[Watchers&lt;br/&gt;watch formData changes]\n        end\n\n        subgraph Style[Style Section]\n            CSS[&lt;style scoped&gt;&lt;br/&gt;Component styles]\n        end\n    end\n\n    subgraph UsedComposables[Composables]\n        UseSimComp[useSimulation&lt;br/&gt;submit, cancel, isLoading]\n        UseNotifComp[useNotification&lt;br/&gt;showSuccess, showError]\n    end\n\n    subgraph DomainModels[Domain Models]\n        Simulation[Simulation&lt;br/&gt;id, name, parameters, status]\n        SimParams[SimulationParameters&lt;br/&gt;iterations, timeout, algorithm]\n        SimStatus[SimulationStatus&lt;br/&gt;PENDING &amp;#124; RUNNING &amp;#124; COMPLETED]\n    end\n\n    subgraph Store[Pinia Store]\n        Actions[SimulationStore.actions&lt;br/&gt;submitSimulation]\n        State[SimulationStore.state&lt;br/&gt;simulations, loading]\n    end\n\n    subgraph Service[Service Layer]\n        SimServiceSubmit[SimulationService.submit&lt;br/&gt;Transform &amp; API call]\n        ApiPost[ApiClient.post&lt;br/&gt;HTTP POST]\n    end\n\n    Template --&gt; Script\n    Script --&gt; ComposableSetup\n    ComposableSetup --&gt; UseSimComp\n    ComposableSetup --&gt; UseNotifComp\n    Methods --&gt; UseSimComp\n    Methods --&gt; Simulation\n    ReactiveState --&gt; SimParams\n\n    UseSimComp --&gt; Actions\n    Actions --&gt; SimServiceSubmit\n    SimServiceSubmit --&gt; ApiPost\n\n    Simulation --&gt; SimParams\n    Simulation --&gt; SimStatus\n\n    style Component fill:#e8f4f8,stroke:#2c5aa0,stroke-width:3px\n    style DomainModels fill:#d4edda,stroke:#28a745,stroke-width:2px\n    style Service fill:#cce5ff,stroke:#004085,stroke-width:2px\n</code></pre>"},{"location":"simulationQueueC4Mermaid/#6-sequence-diagram-simulation-submission-flow","title":"6. Sequence Diagram - Simulation Submission Flow","text":"<pre><code>sequenceDiagram\n    actor Researcher\n    participant View as SimulationSubmitView\n    participant Form as SimulationForm\n    participant Comp as useSimulation()\n    participant Store as SimulationStore\n    participant Service as SimulationService\n    participant Client as ApiClient\n    participant API as Go Backend\n    participant DB as PostgreSQL\n    participant Queue as Queue System\n\n    Researcher-&gt;&gt;View: 1. Fills form and clicks Submit\n    View-&gt;&gt;Form: 2. Trigger validation\n    Form-&gt;&gt;Form: 3. Validate SimulationParameters\n    Form--&gt;&gt;View: 4. Emit submit event (formData)\n\n    View-&gt;&gt;Comp: 5. submitSimulation(params)\n    Comp-&gt;&gt;Comp: 6. Create Simulation instance\n    Comp-&gt;&gt;Comp: 7. Validate domain rules\n    Comp-&gt;&gt;Store: 8. dispatch('submitSimulation')\n    Store-&gt;&gt;Store: 9. Set isLoading = true\n\n    Store-&gt;&gt;Service: 10. simulationService.submit(simulation)\n    Service-&gt;&gt;Service: 11. Transform to SimulationDTO\n    Service-&gt;&gt;Client: 12. apiClient.post('/simulations', dto)\n    Client-&gt;&gt;Client: 13. Add auth headers\n\n    Client-&gt;&gt;API: 14. POST /api/v1/simulations\n    API-&gt;&gt;DB: 15. Save simulation metadata\n    API-&gt;&gt;Queue: 16. Enqueue via adapter\n    API--&gt;&gt;Client: 17. Return SimulationDTO (201)\n\n    Client--&gt;&gt;Service: 18. Promise resolves\n    Service-&gt;&gt;Service: 19. Transform DTO to Simulation\n    Service--&gt;&gt;Store: 20. Return Simulation\n\n    Store-&gt;&gt;Store: 21. Add to simulations[]\n    Store-&gt;&gt;Store: 22. Set isLoading = false\n    Store--&gt;&gt;Comp: 23. Reactive state update\n    Comp--&gt;&gt;View: 24. State propagates (Vue reactivity)\n\n    View-&gt;&gt;View: 25. Hide loading spinner\n    View-&gt;&gt;Researcher: 26. Show success notification\n    View-&gt;&gt;Researcher: 27. Navigate to simulation detail\n\n    Note over View,Comp: View Layer&lt;br/&gt;User interaction &amp; UI state\n    Note over Comp,Store: Composable Layer&lt;br/&gt;Business logic &amp; reactive state\n    Note over Store,Service: State Management&lt;br/&gt;Single source of truth\n    Note over Service,Client: Service/Adapter Layer&lt;br/&gt;DTO \u2194 Domain translation\n    Note over API,Queue: Backend&lt;br/&gt;Hexagonal architecture\n</code></pre>"},{"location":"simulationQueueC4Mermaid/#7-class-diagram-frontend-domain-models","title":"7. Class Diagram - Frontend Domain Models","text":"<pre><code>classDiagram\n    class Simulation {\n        +SimulationId id\n        +string name\n        +SimulationParameters parameters\n        +SimulationStatus status\n        +Date createdAt\n        +Date updatedAt\n        +submit() Promise~void~\n        +cancel() Promise~void~\n        +validate() ValidationResult\n        +isRunning() boolean\n        +isCompleted() boolean\n    }\n\n    class SimulationParameters {\n        +number iterations\n        +number timeout\n        +AlgorithmType algorithm\n        +Map~string,any~ customParams\n        +validate() boolean\n        +toJSON() object\n    }\n\n    class SimulationId {\n        +string value\n        +equals(other) boolean\n        +toString() string\n    }\n\n    class SimulationStatus {\n        &lt;&lt;enumeration&gt;&gt;\n        PENDING\n        RUNNING\n        COMPLETED\n        FAILED\n        CANCELLED\n    }\n\n    class AlgorithmType {\n        &lt;&lt;enumeration&gt;&gt;\n        MONTE_CARLO\n        GENETIC_ALGORITHM\n        NEURAL_NETWORK\n        CUSTOM\n    }\n\n    class SimulationDTO {\n        +string id\n        +string name\n        +object parameters\n        +string status\n        +string createdAt\n    }\n\n    class SimulationService {\n        +submit(simulation) Promise~Simulation~\n        +cancel(id) Promise~void~\n        +getById(id) Promise~Simulation~\n        +list(filters) Promise~Simulation[]~\n        -toDTO(simulation) SimulationDTO\n        -fromDTO(dto) Simulation\n    }\n\n    Simulation \"1\" *-- \"1\" SimulationId : has\n    Simulation \"1\" *-- \"1\" SimulationParameters : contains\n    Simulation \"1\" --&gt; \"1\" SimulationStatus : has\n    SimulationParameters --&gt; AlgorithmType : uses\n    SimulationService ..&gt; Simulation : creates/returns\n    SimulationService ..&gt; SimulationDTO : transforms\n\n    note for Simulation \"Domain Model\\nMatches backend ubiquitous language\\nBusiness logic methods\"\n    note for SimulationService \"Adapter Pattern\\nTranslates between domain and API\\nIsolates DTO changes\"\n</code></pre>"},{"location":"simulationQueueC4Mermaid/#8-state-diagram-simulation-lifecycle","title":"8. State Diagram - Simulation Lifecycle","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; PENDING : User submits simulation\n\n    PENDING --&gt; RUNNING : Queue picks up task\n    PENDING --&gt; CANCELLED : User cancels before start\n    PENDING --&gt; FAILED : Validation fails\n\n    RUNNING --&gt; COMPLETED : Execution successful\n    RUNNING --&gt; FAILED : Execution error\n    RUNNING --&gt; CANCELLED : User cancels during execution\n\n    COMPLETED --&gt; [*]\n    FAILED --&gt; [*]\n    CANCELLED --&gt; [*]\n\n    note right of PENDING\n        Initial state\n        Awaiting queue pickup\n    end note\n\n    note right of RUNNING\n        Currently executing\n        Progress updates available\n    end note\n\n    note right of COMPLETED\n        Successful completion\n        Results available\n    end note\n\n    note right of FAILED\n        Error occurred\n        Error logs available\n    end note\n\n    note right of CANCELLED\n        User-initiated cancellation\n        Partial results may exist\n    end note\n</code></pre>"},{"location":"simulationQueueC4MermaidX/","title":"Simulation Job Queue System - C4 Architecture Diagrams (Mermaid)","text":""},{"location":"simulationQueueC4MermaidX/#1-system-context-diagram-c1","title":"1. System Context Diagram (C1)","text":"<pre><code>C4Context\n    title System Context Diagram - Simulation Job Queue System\n\n    Person(researcher, \"Researcher\", \"User who submits and monitors simulation jobs\")\n    Person(admin, \"System Administrator\", \"Manages system configuration and monitoring\")\n\n\n    System(simSystem, \"Simulation System\", \"Allows users to submit, monitor, and manage simulation jobs using consistent terminology across all interfaces\")\n\n    System_Ext(machinery, \"Machinery Queue\", \"Distributed task queue using Redis for job processing\")\n    System_Ext(lambda, \"AWS Lambda\", \"Serverless compute platform for simulation execution\")\n    System_Ext(sqs, \"AWS SQS\", \"Message queue service for Lambda-based simulations\")\n    System_Ext(redis, \"Redis\", \"In-memory data store for Machinery queue backend\")\n    System_Ext(monitoring, \"Monitoring System\", \"System metrics and logs (Prometheus, Grafana)\")\n\n    Rel_D(researcher, simSystem, \"Submits simulations, views results\", \"HTTPS\")\n    Rel_D(admin, simSystem, \"Configures system, views metrics\", \"HTTPS\")\n\n    Rel(simSystem, machinery, \"Enqueues simulation tasks\", \"Machinery Protocol\")\n    Rel(simSystem, lambda, \"Invokes simulation functions\", \"AWS SDK\")\n    Rel(simSystem, sqs, \"Sends simulation messages\", \"AWS SQS API\")\n    Rel(machinery, redis, \"Stores task state\", \"Redis Protocol\")\n    Rel(simSystem, monitoring, \"Sends metrics and logs\", \"Prometheus/Loki\")\n\n    UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")\n</code></pre>"},{"location":"simulationQueueC4MermaidX/#2-container-diagram-c2","title":"2. Container Diagram (C2)","text":"<pre><code>C4Container\n    title Container Diagram - Simulation Job Queue System\n\n    Person(researcher, \"Researcher\", \"User who submits and monitors simulations\")\n\n    System_Boundary(simSystem, \"Simulation System\") {\n        Container(spa, \"Web Application\", \"Vue.js SPA\", \"Provides simulation submission and monitoring UI using consistent 'Simulation' terminology\")\n        Container(docs, \"User Documentation\", \"Markdown/HTML\", \"User manual and API documentation using 'Simulation' ubiquitous language\")\n        Container(api, \"API Application\", \"Go\", \"Handles simulation requests, implements domain logic and ports\")\n        Container(domain, \"Domain Core\", \"Go\", \"Pure business logic for simulations - no infrastructure dependencies\")\n        ContainerDb(db, \"Application Database\", \"PostgreSQL\", \"Stores simulation metadata, status, and results\")\n    }\n\n    System_Ext(machinery, \"Machinery Queue\", \"Task queue with Redis backend\")\n    System_Ext(lambda, \"AWS Lambda\", \"Serverless execution platform\")\n    System_Ext(sqs, \"AWS SQS\", \"Message queue service\")\n\n    Rel(researcher, spa, \"Views simulations, submits new simulations\", \"HTTPS\")\n    Rel(researcher, docs, \"Reads about simulation concepts\", \"HTTPS\")\n\n    Rel(spa, api, \"Makes API calls using Simulation terminology\", \"JSON/HTTPS\")\n    Rel(api, domain, \"Uses domain services and aggregates\", \"Function calls\")\n    Rel(api, db, \"Reads/writes simulation data\", \"SQL/TLS\")\n\n    Rel(api, machinery, \"Enqueues via MachineryAdapter\", \"Machinery Protocol\")\n    Rel(api, lambda, \"Invokes via LambdaAdapter\", \"AWS SDK\")\n    Rel(api, sqs, \"Sends messages via LambdaAdapter\", \"AWS SQS API\")\n\n    UpdateRelStyle(researcher, spa, $offsetY=\"-40\")\n    UpdateRelStyle(spa, api, $offsetY=\"-20\")\n</code></pre>"},{"location":"simulationQueueC4MermaidX/#3-component-diagram-backend-api-c3","title":"3. Component Diagram - Backend API (C3)","text":"<pre><code>C4Component\n    title Component Diagram - API Application (Backend)\n\n    Container(spa, \"Web Application\", \"Vue.js SPA\", \"Frontend making API calls\")\n\n    Container_Boundary(api, \"API Application\") {\n        Component(router, \"HTTP Router\", \"Go net/http\", \"Routes requests to appropriate handlers\")\n        Component(middleware, \"Auth Middleware\", \"Go middleware\", \"Authentication and authorization\")\n        Component(simHandler, \"SimulationHandler\", \"Primary Adapter\", \"Handles HTTP requests for simulation operations\")\n\n        Component(simService, \"SimulationService\", \"Primary Port Interface\", \"Defines use cases for simulation operations\")\n\n        Component(simAggregate, \"Simulation Aggregate\", \"Domain Entity\", \"Core simulation business logic and rules\")\n        Component(simScheduler, \"SimulationScheduler\", \"Domain Service\", \"Orchestrates simulation scheduling logic\")\n        Component(simValidator, \"SimulationValidator\", \"Domain Service\", \"Validates simulation parameters\")\n\n        Component(queuePort, \"SimulationQueue\", \"Secondary Port Interface\", \"Defines contract for queue operations\")\n        Component(repoPort, \"SimulationRepository\", \"Secondary Port Interface\", \"Defines contract for persistence\")\n\n        Component(machineryAdapter, \"MachinerySimulationQueue\", \"Secondary Adapter\", \"Implements queue port for Machinery\")\n        Component(lambdaAdapter, \"LambdaSimulationQueue\", \"Secondary Adapter\", \"Implements queue port for AWS Lambda\")\n        Component(pgAdapter, \"PostgresSimulationRepo\", \"Secondary Adapter\", \"Implements repository port for PostgreSQL\")\n    }\n\n    ContainerDb(db, \"Application Database\", \"PostgreSQL\", \"Stores simulation data\")\n    System_Ext(machinery, \"Machinery Queue\", \"Task queue system\")\n    System_Ext(lambda, \"AWS Lambda + SQS\", \"Serverless platform\")\n\n    Rel(spa, router, \"Makes API calls\", \"JSON/HTTPS\")\n    Rel(router, middleware, \"Passes request\")\n    Rel(middleware, simHandler, \"Authenticated request\")\n\n    Rel(simHandler, simService, \"Calls use cases\", \"Go interface\")\n\n    Rel(simService, simAggregate, \"Uses\")\n    Rel(simService, simScheduler, \"Uses\")\n    Rel(simService, simValidator, \"Uses\")\n    Rel(simService, queuePort, \"Enqueues via interface\")\n    Rel(simService, repoPort, \"Persists via interface\")\n\n    Rel(queuePort, machineryAdapter, \"Implemented by\")\n    Rel(queuePort, lambdaAdapter, \"Implemented by\")\n    Rel(repoPort, pgAdapter, \"Implemented by\")\n\n    Rel(machineryAdapter, machinery, \"Translates to Machinery Task\", \"Machinery Protocol\")\n    Rel(lambdaAdapter, lambda, \"Translates to Lambda Event\", \"AWS SDK\")\n    Rel(pgAdapter, db, \"SQL queries\", \"SQL/TLS\")\n\n    UpdateLayoutConfig($c4ShapeInRow=\"4\", $c4BoundaryInRow=\"1\")\n</code></pre>"},{"location":"simulationQueueC4MermaidX/#4-component-diagram-frontend-c3-detailed","title":"4. Component Diagram - Frontend (C3 - Detailed)","text":"<pre><code>C4Component\n    title Component Diagram - Web Application (Vue.js Frontend)\n\n    Person(researcher, \"Researcher\", \"System user\")\n\n    Container_Boundary(spa, \"Web Application - Vue.js SPA\") {\n        Component(router, \"Vue Router\", \"Vue Router\", \"Client-side routing, navigation guards\")\n\n        Component(simListView, \"SimulationListView\", \"Vue Component\", \"Displays list of simulations with filtering and sorting\")\n        Component(simDetailView, \"SimulationDetailView\", \"Vue Component\", \"Shows detailed simulation information and logs\")\n        Component(simSubmitView, \"SimulationSubmitView\", \"Vue Component\", \"Form for submitting new simulations\")\n        Component(dashboardView, \"DashboardView\", \"Vue Component\", \"Overview with statistics and recent simulations\")\n\n        Component(simCard, \"SimulationCard\", \"Vue Component\", \"Reusable card displaying simulation summary\")\n        Component(simForm, \"SimulationForm\", \"Vue Component\", \"Reusable form with validation for simulation parameters\")\n        Component(simStatus, \"SimulationStatusBadge\", \"Vue Component\", \"Visual status indicator\")\n        Component(simTable, \"SimulationTable\", \"Vue Component\", \"Sortable, filterable table of simulations\")\n\n        Component(simStore, \"SimulationStore\", \"Pinia Store Module\", \"Manages simulation state, actions, and getters\")\n        Component(authStore, \"AuthStore\", \"Pinia Store Module\", \"Manages authentication state\")\n        Component(uiStore, \"UIStore\", \"Pinia Store Module\", \"Manages UI state (loading, errors, notifications)\")\n\n        Component(apiClient, \"ApiClient\", \"Service\", \"HTTP client wrapper with interceptors, error handling\")\n        Component(simService, \"SimulationService\", \"Service\", \"Translates between API DTOs and domain models\")\n        Component(authService, \"AuthService\", \"Service\", \"Handles authentication, token management\")\n\n        Component(useSimulation, \"useSimulation\", \"Composable\", \"Reactive simulation operations (submit, cancel, refresh)\")\n        Component(useSimulationList, \"useSimulationList\", \"Composable\", \"Reactive list operations (fetch, filter, sort)\")\n\n        Component(simModel, \"Simulation\", \"TypeScript Interface\", \"Frontend domain model matching backend ubiquitous language\")\n        Component(simDTO, \"SimulationDTO\", \"TypeScript Interface\", \"Data transfer object for API communication\")\n    }\n\n    Container(api, \"API Application\", \"Go\", \"Backend API\")\n\n    Rel(researcher, router, \"Navigates to pages\", \"HTTPS\")\n    Rel(router, simListView, \"Routes to\")\n    Rel(router, simDetailView, \"Routes to\")\n    Rel(router, simSubmitView, \"Routes to\")\n    Rel(router, dashboardView, \"Routes to\")\n\n    Rel(simListView, simTable, \"Uses\", \"Props &amp; Events\")\n    Rel(simListView, simCard, \"Uses\", \"Props &amp; Events\")\n    Rel(simDetailView, simStatus, \"Uses\", \"Props\")\n    Rel(simSubmitView, simForm, \"Uses\", \"Props &amp; Events\")\n\n    Rel(simListView, useSimulationList, \"Uses\", \"Reactive data\")\n    Rel(simDetailView, useSimulation, \"Uses\", \"Reactive data\")\n    Rel(simSubmitView, useSimulation, \"Uses\", \"Reactive data\")\n\n    Rel(useSimulation, simStore, \"Accesses/mutates\")\n    Rel(useSimulationList, simStore, \"Accesses/mutates\")\n\n    Rel(simStore, simService, \"Calls\")\n    Rel(authStore, authService, \"Calls\")\n\n    Rel(simService, apiClient, \"Makes HTTP requests\")\n    Rel(authService, apiClient, \"Makes HTTP requests\")\n\n    Rel(simService, simModel, \"Returns/accepts\")\n    Rel(simService, simDTO, \"Transforms to/from\")\n\n    Rel(apiClient, api, \"HTTP requests\", \"JSON/HTTPS\")\n\n    UpdateLayoutConfig($c4ShapeInRow=\"4\", $c4BoundaryInRow=\"1\")\n</code></pre>"},{"location":"simulationQueueC4MermaidX/#5-dynamic-diagram-submission-flow-c4","title":"5. Dynamic Diagram - Submission Flow (C4)","text":"<pre><code>C4Dynamic\n    title Dynamic Diagram - Simulation Submission Flow\n\n    Person(researcher, \"Researcher\", \"System user\")\n\n    Container_Boundary(frontend, \"Vue.js Frontend\") {\n        Component(view, \"SimulationSubmitView\", \"Vue Component\")\n        Component(composable, \"useSimulation()\", \"Composable\")\n        Component(store, \"SimulationStore\", \"Pinia Store\")\n        Component(service, \"SimulationService\", \"Service\")\n        Component(client, \"ApiClient\", \"HTTP Client\")\n    }\n\n    Container(api, \"API Backend\", \"Go\")\n    ContainerDb(db, \"Database\", \"PostgreSQL\")\n    System_Ext(queue, \"Queue System\", \"Machinery/Lambda\")\n\n    Rel(researcher, view, \"1. Submits form\", \"User input\")\n    Rel(view, composable, \"2. submitSimulation()\", \"Function call\")\n    Rel(composable, store, \"3. Dispatch action\", \"Pinia\")\n    Rel(store, service, \"4. submit(simulation)\", \"Method call\")\n    Rel(service, client, \"5. POST request\", \"HTTP\")\n    Rel(client, api, \"6. /api/v1/simulations\", \"JSON/HTTPS\")\n    Rel(api, db, \"7. Save metadata\", \"SQL\")\n    Rel(api, queue, \"8. Enqueue task\", \"Adapter\")\n    Rel(api, client, \"9. Return DTO\", \"201 Created\")\n    Rel(client, service, \"10. Response\", \"Promise\")\n    Rel(service, store, \"11. Update state\", \"Simulation\")\n    Rel(store, view, \"12. Reactive update\", \"Vue\")\n    Rel(view, researcher, \"13. Show notification\", \"UI feedback\")\n\n    UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")\n</code></pre>"},{"location":"simulationQueueC4MermaidX/#6-deployment-diagram-system-deployment","title":"6. Deployment Diagram - System Deployment","text":"<pre><code>C4Deployment\n    title Deployment Diagram - Simulation System\n\n    Deployment_Node(browser, \"User's Browser\", \"Chrome/Firefox/Safari\") {\n        Container(spa, \"Vue.js SPA\", \"JavaScript\", \"Frontend application\")\n    }\n\n    Deployment_Node(cdn, \"CDN\", \"CloudFront\") {\n        Container(staticAssets, \"Static Assets\", \"JS/CSS/HTML\", \"Compiled frontend bundle\")\n    }\n\n    Deployment_Node(kubernetes, \"Kubernetes Cluster\", \"AWS EKS\") {\n        Deployment_Node(apiPod, \"API Pod\", \"Container\") {\n            Container(api, \"API Application\", \"Go\", \"Backend service\")\n        }\n\n        Deployment_Node(workerPod, \"Worker Pod\", \"Container\") {\n            Container(worker, \"Machinery Worker\", \"Go\", \"Processes simulation tasks\")\n        }\n    }\n\n    Deployment_Node(aws, \"AWS\", \"Cloud Provider\") {\n        Deployment_Node(rds, \"RDS\", \"Managed PostgreSQL\") {\n            ContainerDb(db, \"Database\", \"PostgreSQL\", \"Simulation data\")\n        }\n\n        Deployment_Node(elasticache, \"ElastiCache\", \"Managed Redis\") {\n            ContainerDb(redis, \"Redis\", \"Redis\", \"Queue backend\")\n        }\n\n        Deployment_Node(lambdaService, \"Lambda Service\", \"Serverless\") {\n            Container(lambda, \"Simulation Function\", \"Python/Go\", \"Serverless execution\")\n        }\n\n        Deployment_Node(sqsService, \"SQS\", \"Message Queue\") {\n            Container(sqs, \"Simulation Queue\", \"SQS\", \"Lambda trigger\")\n        }\n    }\n\n    Rel(spa, staticAssets, \"Loads from\", \"HTTPS\")\n    Rel(spa, api, \"API calls\", \"JSON/HTTPS\")\n    Rel(api, db, \"Queries\", \"SQL/TLS\")\n    Rel(api, redis, \"Queue operations\", \"Redis Protocol\")\n    Rel(api, sqs, \"Send messages\", \"AWS SDK\")\n    Rel(worker, redis, \"Poll tasks\", \"Redis Protocol\")\n    Rel(sqs, lambda, \"Triggers\", \"Event\")\n    Rel(lambda, db, \"Update results\", \"SQL/TLS\")\n\n    UpdateLayoutConfig($c4ShapeInRow=\"2\", $c4BoundaryInRow=\"1\")\n</code></pre>"},{"location":"simulationQueueC4MermaidX/#alternative-diagrams-non-c4-mermaid","title":"Alternative Diagrams (Non-C4 Mermaid)","text":""},{"location":"simulationQueueC4MermaidX/#sequence-diagram-detailed-submission-flow","title":"Sequence Diagram - Detailed Submission Flow","text":"<pre><code>sequenceDiagram\n    autonumber\n    actor Researcher\n    participant View as SimulationSubmitView\n    participant Form as SimulationForm\n    participant Comp as useSimulation()\n    participant Store as SimulationStore\n    participant Service as SimulationService\n    participant Client as ApiClient\n    participant API as Go Backend\n    participant DB as PostgreSQL\n    participant Queue as Queue System\n\n    Researcher-&gt;&gt;View: Fills form and clicks Submit\n    View-&gt;&gt;Form: Trigger validation\n    Form-&gt;&gt;Form: Validate SimulationParameters\n    Form--&gt;&gt;View: Emit submit event (formData)\n\n    Note over View,Comp: Frontend Business Logic\n    View-&gt;&gt;Comp: submitSimulation(params)\n    Comp-&gt;&gt;Comp: Create Simulation instance\n    Comp-&gt;&gt;Comp: Validate domain rules\n\n    Note over Comp,Store: State Management\n    Comp-&gt;&gt;Store: dispatch('submitSimulation')\n    Store-&gt;&gt;Store: Set isLoading = true\n\n    Note over Store,Service: Service/Adapter Layer\n    Store-&gt;&gt;Service: simulationService.submit(simulation)\n    Service-&gt;&gt;Service: Transform to SimulationDTO\n    Service-&gt;&gt;Client: apiClient.post('/simulations', dto)\n    Client-&gt;&gt;Client: Add auth headers &amp; interceptors\n\n    Note over Client,Queue: Backend Processing\n    Client-&gt;&gt;API: POST /api/v1/simulations\n    API-&gt;&gt;DB: Save simulation metadata\n    API-&gt;&gt;Queue: Enqueue via adapter\n    API--&gt;&gt;Client: Return SimulationDTO (201)\n\n    Note over Service,View: Response Handling\n    Client--&gt;&gt;Service: Promise resolves\n    Service-&gt;&gt;Service: Transform DTO to Simulation\n    Service--&gt;&gt;Store: Return Simulation\n    Store-&gt;&gt;Store: Add to simulations[]\n    Store-&gt;&gt;Store: Set isLoading = false\n\n    Note over View,Researcher: UI Update\n    Store--&gt;&gt;Comp: Reactive state update\n    Comp--&gt;&gt;View: State propagates (Vue reactivity)\n    View-&gt;&gt;View: Hide loading spinner\n    View-&gt;&gt;Researcher: Show success notification\n    View-&gt;&gt;Researcher: Navigate to simulation detail\n</code></pre>"},{"location":"simulationQueueC4MermaidX/#class-diagram-domain-models","title":"Class Diagram - Domain Models","text":"<pre><code>classDiagram\n    class Simulation {\n        +SimulationId id\n        +string name\n        +SimulationParameters parameters\n        +SimulationStatus status\n        +Date createdAt\n        +Date updatedAt\n        +submit() Promise~void~\n        +cancel() Promise~void~\n        +validate() ValidationResult\n        +isRunning() boolean\n        +isCompleted() boolean\n    }\n\n    class SimulationParameters {\n        +number iterations\n        +number timeout\n        +AlgorithmType algorithm\n        +Map~string,any~ customParams\n        +validate() boolean\n        +toJSON() object\n    }\n\n    class SimulationId {\n        &lt;&lt;Value Object&gt;&gt;\n        +string value\n        +equals(other) boolean\n        +toString() string\n    }\n\n    class SimulationStatus {\n        &lt;&lt;enumeration&gt;&gt;\n        PENDING\n        RUNNING\n        COMPLETED\n        FAILED\n        CANCELLED\n    }\n\n    class AlgorithmType {\n        &lt;&lt;enumeration&gt;&gt;\n        MONTE_CARLO\n        GENETIC_ALGORITHM\n        NEURAL_NETWORK\n        CUSTOM\n    }\n\n    class SimulationDTO {\n        &lt;&lt;Data Transfer Object&gt;&gt;\n        +string id\n        +string name\n        +object parameters\n        +string status\n        +string createdAt\n    }\n\n    class SimulationService {\n        &lt;&lt;Adapter&gt;&gt;\n        +submit(simulation) Promise~Simulation~\n        +cancel(id) Promise~void~\n        +getById(id) Promise~Simulation~\n        +list(filters) Promise~Simulation[]~\n        -toDTO(simulation) SimulationDTO\n        -fromDTO(dto) Simulation\n    }\n\n    Simulation \"1\" *-- \"1\" SimulationId : has\n    Simulation \"1\" *-- \"1\" SimulationParameters : contains\n    Simulation \"1\" --&gt; \"1\" SimulationStatus : has\n    SimulationParameters --&gt; AlgorithmType : uses\n    SimulationService ..&gt; Simulation : creates/returns\n    SimulationService ..&gt; SimulationDTO : transforms\n\n    note for Simulation \"Domain Model - matches backend ubiquitous language\"\n    note for SimulationService \"Adapter Pattern - translates between domain and API\"\n</code></pre>"},{"location":"simulationQueueC4MermaidX/#state-diagram-simulation-lifecycle","title":"State Diagram - Simulation Lifecycle","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; PENDING : User submits simulation\n\n    PENDING --&gt; RUNNING : Queue picks up task\n    PENDING --&gt; CANCELLED : User cancels before start\n    PENDING --&gt; FAILED : Validation fails\n\n    RUNNING --&gt; COMPLETED : Execution successful\n    RUNNING --&gt; FAILED : Execution error\n    RUNNING --&gt; CANCELLED : User cancels during execution\n\n    COMPLETED --&gt; [*]\n    FAILED --&gt; [*]\n    CANCELLED --&gt; [*]\n\n    note right of PENDING\n        Initial state\n        Awaiting queue pickup\n    end note\n\n    note right of RUNNING\n        Currently executing\n        Progress updates available\n    end note\n\n    note right of COMPLETED\n        Successful completion\n        Results available\n    end note\n</code></pre>"},{"location":"systemLandscapeMermaid/","title":"System Landscape Diagram - Research &amp; Simulation Platform","text":""},{"location":"systemLandscapeMermaid/#c4-system-landscape-mermaid","title":"C4 System Landscape (Mermaid)","text":"<pre><code>C4Context\n    title System Landscape Diagram - Research &amp; Simulation Platform\n\n    Person(researcher, \"Researcher\", \"Conducts simulations and analyzes results\")\n    Person(admin, \"Administrator\", \"Manages users and system configuration\")\n    Person(dataScientist, \"Data Scientist\", \"Develops and trains models\")\n    Person(auditor, \"Compliance Auditor\", \"Reviews system usage and access logs\")\n\n    Enterprise_Boundary(platform, \"Research &amp; Simulation Platform\") {\n        System(simSystem, \"Simulation Job Queue System\", \"Manages submission, execution, and monitoring of simulation jobs using distributed queues\")\n\n        System(userMgmt, \"User Management System\", \"Handles authentication, authorization, user profiles, and role-based access control\")\n\n        System(modelingSystem, \"Modeling System\", \"Provides tools for creating, versioning, and managing simulation models and parameters\")\n\n        System(dataLake, \"Data Lake System\", \"Stores and manages large-scale simulation results, raw data, and datasets for analysis\")\n\n        System(reportingSystem, \"Reporting &amp; Analytics System\", \"Generates reports, visualizations, and statistical analysis of simulation results\")\n\n        System(notificationSystem, \"Notification System\", \"Sends email, SMS, and in-app notifications about simulation status and system events\")\n    }\n\n\n    System_Ext(sso, \"Corporate SSO\", \"SAML/OAuth2 identity provider (Okta, Azure AD)\")\n    System_Ext(billing, \"Billing System\", \"Tracks resource usage and generates invoices\")\n    System_Ext(hpc, \"HPC Cluster\", \"High-performance computing infrastructure for intensive simulations\")\n    System_Ext(cloudStorage, \"Cloud Storage\", \"AWS S3/Azure Blob for long-term data archival\")\n    System_Ext(monitoring, \"Monitoring Platform\", \"Prometheus, Grafana, ELK stack for observability\")\n    System_Ext(emailService, \"Email Service\", \"SendGrid/SES for transactional emails\")\n\n    Rel(researcher, simSystem, \"Submits and monitors simulations\", \"HTTPS/WebSocket\")\n    Rel(researcher, modelingSystem, \"Creates and manages models\", \"HTTPS\")\n    Rel(researcher, reportingSystem, \"Views reports and analytics\", \"HTTPS\")\n\n    Rel(dataScientist, modelingSystem, \"Develops ML models\", \"HTTPS/API\")\n    Rel(dataScientist, dataLake, \"Accesses training data\", \"HTTPS/S3 API\")\n\n    Rel(admin, userMgmt, \"Manages users and permissions\", \"HTTPS\")\n    Rel(admin, simSystem, \"Configures system settings\", \"HTTPS\")\n\n    Rel(auditor, userMgmt, \"Reviews access logs\", \"HTTPS\")\n    Rel(auditor, reportingSystem, \"Views audit reports\", \"HTTPS\")\n\n    Rel(simSystem, userMgmt, \"Authenticates users, checks permissions\", \"REST API/gRPC\")\n    Rel(simSystem, modelingSystem, \"Fetches model definitions\", \"REST API\")\n    Rel(simSystem, dataLake, \"Stores simulation results\", \"S3 API\")\n    Rel(simSystem, notificationSystem, \"Triggers status notifications\", \"Message Queue\")\n    Rel(simSystem, billing, \"Reports resource usage\", \"REST API\")\n    Rel(simSystem, hpc, \"Dispatches heavy compute jobs\", \"SSH/SLURM API\")\n    Rel(simSystem, monitoring, \"Sends metrics and logs\", \"Prometheus/Loki\")\n\n    Rel(modelingSystem, userMgmt, \"Authenticates users\", \"REST API\")\n    Rel(modelingSystem, dataLake, \"Stores model artifacts\", \"S3 API\")\n    Rel(modelingSystem, monitoring, \"Sends metrics and logs\", \"Prometheus/Loki\")\n\n    Rel(reportingSystem, simSystem, \"Queries simulation data\", \"REST API/SQL\")\n    Rel(reportingSystem, dataLake, \"Reads result datasets\", \"S3 API\")\n    Rel(reportingSystem, userMgmt, \"Authenticates users\", \"REST API\")\n\n    Rel(dataLake, cloudStorage, \"Archives old data\", \"S3 API\")\n\n    Rel(notificationSystem, emailService, \"Sends emails\", \"SMTP/API\")\n\n    Rel(userMgmt, sso, \"Federates authentication\", \"SAML/OAuth2\")\n    Rel(userMgmt, monitoring, \"Sends metrics and logs\", \"Prometheus/Loki\")\n\n    UpdateLayoutConfig($c4ShapeInRow=\"3\", $c4BoundaryInRow=\"1\")\n</code></pre>"},{"location":"systemLandscapeMermaid/#system-overview","title":"System Overview","text":""},{"location":"systemLandscapeMermaid/#internal-systems-research-simulation-platform","title":"Internal Systems (Research &amp; Simulation Platform)","text":""},{"location":"systemLandscapeMermaid/#1-simulation-job-queue-system","title":"1. Simulation Job Queue System","text":"<ul> <li>Purpose: Core system for managing simulation workloads</li> <li>Key Features:</li> <li>Job submission and queuing (Machinery/Lambda)</li> <li>Distributed execution across multiple backends</li> <li>Real-time status monitoring via WebSocket</li> <li>Consistent \"Simulation\" ubiquitous language</li> <li>Architecture: Hexagonal/DDD with ports &amp; adapters</li> <li>Dependencies: User Management, Modeling System, Data Lake, Notification   System</li> </ul>"},{"location":"systemLandscapeMermaid/#2-user-management-system","title":"2. User Management System","text":"<ul> <li>Purpose: Centralized identity and access management</li> <li>Key Features:</li> <li>User registration, authentication, authorization</li> <li>Role-based access control (RBAC)</li> <li>SSO integration (SAML/OAuth2)</li> <li>Audit logging and compliance</li> <li>API key management for programmatic access</li> <li>Technology: Keycloak-based or custom Go service</li> <li>External Integration: Corporate SSO (Okta, Azure AD)</li> </ul>"},{"location":"systemLandscapeMermaid/#3-modeling-system","title":"3. Modeling System","text":"<ul> <li>Purpose: Manage simulation models and configurations</li> <li>Key Features:</li> <li>Model versioning (Git-like workflow)</li> <li>Parameter templates and validation schemas</li> <li>Model marketplace/library</li> <li>Jupyter notebook integration</li> <li>ML model registry</li> <li>Technology: Python/FastAPI backend with MLflow integration</li> <li>Users: Data Scientists, Researchers</li> </ul>"},{"location":"systemLandscapeMermaid/#4-data-lake-system","title":"4. Data Lake System","text":"<ul> <li>Purpose: Scalable storage for simulation data</li> <li>Key Features:</li> <li>Object storage (S3-compatible)</li> <li>Metadata catalog (Apache Iceberg/Delta Lake)</li> <li>Data lifecycle management</li> <li>Query engine (Presto/Trino)</li> <li>Data versioning and lineage</li> <li>Technology: MinIO/S3 + Apache Iceberg</li> <li>Scale: Petabyte-scale storage</li> </ul>"},{"location":"systemLandscapeMermaid/#5-reporting-analytics-system","title":"5. Reporting &amp; Analytics System","text":"<ul> <li>Purpose: Business intelligence and data visualization</li> <li>Key Features:</li> <li>Interactive dashboards (Grafana/Superset)</li> <li>Statistical analysis</li> <li>Custom report generation</li> <li>Scheduled reports</li> <li>Export to PDF/Excel</li> <li>Technology: Apache Superset or custom React/D3.js</li> <li>Data Sources: Simulation System, Data Lake</li> </ul>"},{"location":"systemLandscapeMermaid/#6-notification-system","title":"6. Notification System","text":"<ul> <li>Purpose: Multi-channel notification delivery</li> <li>Key Features:</li> <li>Email, SMS, push notifications</li> <li>Webhook integrations (Slack, Teams)</li> <li>Notification preferences per user</li> <li>Template management</li> <li>Delivery tracking and retries</li> <li>Technology: Event-driven architecture with message queue</li> <li>Patterns: Publisher-Subscriber</li> </ul>"},{"location":"systemLandscapeMermaid/#external-systems","title":"External Systems","text":""},{"location":"systemLandscapeMermaid/#7-corporate-sso","title":"7. Corporate SSO","text":"<ul> <li>Examples: Okta, Azure AD, Auth0</li> <li>Protocol: SAML 2.0, OAuth2/OIDC</li> <li>Purpose: Enterprise identity federation</li> </ul>"},{"location":"systemLandscapeMermaid/#8-billing-system","title":"8. Billing System","text":"<ul> <li>Purpose: Track resource consumption and costs</li> <li>Integration: Receives usage metrics from Simulation System</li> <li>Features: Chargeback, cost allocation, invoicing</li> </ul>"},{"location":"systemLandscapeMermaid/#9-hpc-cluster","title":"9. HPC Cluster","text":"<ul> <li>Purpose: High-performance computing for intensive jobs</li> <li>Examples: SLURM, PBS, Kubernetes with GPU nodes</li> <li>Interface: SSH, REST API, batch submission</li> </ul>"},{"location":"systemLandscapeMermaid/#10-cloud-storage","title":"10. Cloud Storage","text":"<ul> <li>Purpose: Long-term archival (cold storage)</li> <li>Examples: AWS S3 Glacier, Azure Archive Storage</li> <li>Lifecycle: Automatic archival after 90+ days</li> </ul>"},{"location":"systemLandscapeMermaid/#11-monitoring-platform","title":"11. Monitoring Platform","text":"<ul> <li>Components: Prometheus (metrics), Grafana (dashboards), ELK (logs)</li> <li>Purpose: Observability across all systems</li> <li>Features: Alerting, distributed tracing (Jaeger)</li> </ul>"},{"location":"systemLandscapeMermaid/#12-email-service","title":"12. Email Service","text":"<ul> <li>Examples: SendGrid, AWS SES, Mailgun</li> <li>Purpose: Transactional email delivery</li> <li>Usage: Notifications, password resets, reports</li> </ul>"},{"location":"systemLandscapeMermaid/#key-architectural-patterns","title":"Key Architectural Patterns","text":""},{"location":"systemLandscapeMermaid/#cross-system-communication","title":"Cross-System Communication","text":"<ol> <li>Synchronous: REST APIs, gRPC for real-time operations</li> <li>Asynchronous: Message queues (RabbitMQ, Kafka) for event-driven flows</li> <li>Data Integration: S3 API for bulk data transfer</li> </ol>"},{"location":"systemLandscapeMermaid/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    actor User\n    participant App as Any System\n    participant UserMgmt as User Management\n    participant SSO as Corporate SSO\n\n    User-&gt;&gt;App: Access resource\n    App-&gt;&gt;UserMgmt: Validate token\n    alt Token expired\n        UserMgmt-&gt;&gt;SSO: Federated auth\n        SSO--&gt;&gt;UserMgmt: SAML assertion\n        UserMgmt--&gt;&gt;App: New token\n    else Token valid\n        UserMgmt--&gt;&gt;App: User info + permissions\n    end\n    App--&gt;&gt;User: Authorized access\n</code></pre>"},{"location":"systemLandscapeMermaid/#simulation-workflow","title":"Simulation Workflow","text":"<pre><code>graph LR\n    A[User creates model] --&gt; B[Modeling System]\n    B --&gt; C[Submit simulation]\n    C --&gt; D[Simulation System]\n    D --&gt; E{Check permissions}\n    E --&gt;|Authorized| F[User Management]\n    F --&gt; G[Queue job]\n    G --&gt; H[Execute on HPC/Lambda]\n    H --&gt; I[Store results]\n    I --&gt; J[Data Lake]\n    J --&gt; K[Notify user]\n    K --&gt; L[Notification System]\n    L --&gt; M[User receives email]\n\n    style D fill:#d4edda\n    style F fill:#fff3cd\n    style J fill:#e8f4f8\n</code></pre>"},{"location":"systemLandscapeMermaid/#data-flow","title":"Data Flow","text":"<pre><code>graph TB\n    subgraph Ingest\n        A[Researcher submits job]\n        B[Simulation executes]\n    end\n\n    subgraph Process\n        C[Results generated]\n        D[Stored in Data Lake]\n    end\n\n    subgraph Analyze\n        E[Reporting queries data]\n        F[Dashboards updated]\n    end\n\n    subgraph Archive\n        G[Old data archived]\n        H[Cloud Storage]\n    end\n\n    A --&gt; B --&gt; C --&gt; D\n    D --&gt; E --&gt; F\n    D --&gt; G --&gt; H\n\n    style D fill:#e8f4f8\n</code></pre>"},{"location":"systemLandscapeMermaid/#system-boundaries-responsibilities","title":"System Boundaries &amp; Responsibilities","text":"System Primary Responsibility Technology Stack Scale Simulation Job Queue Job orchestration Go, Vue.js, Redis/Lambda 10K+ jobs/day User Management Identity &amp; access Keycloak/Go, PostgreSQL 10K+ users Modeling System Model lifecycle Python/FastAPI, MLflow 1K+ models Data Lake Data storage &amp; query S3/MinIO, Iceberg, Trino Petabyte scale Reporting &amp; Analytics BI &amp; visualization Superset, PostgreSQL 100+ dashboards Notification System Message delivery Go, RabbitMQ, Redis 100K+ msgs/day"},{"location":"tbd-feature-lifecycle/","title":"Feature Lifecycle in Trunk-Based Development","text":""},{"location":"tbd-feature-lifecycle/#overview","title":"Overview","text":"<p>This document illustrates how features evolve through different stages in a Trunk-Based Development (TBD) workflow without pre-release tags, using semantic versioning from version 1.2.3 to 10.0.0.</p>"},{"location":"tbd-feature-lifecycle/#feature-lifecycle-stages","title":"Feature Lifecycle Stages","text":""},{"location":"tbd-feature-lifecycle/#1-experimental-stage","title":"1. Experimental Stage","text":"<p>In TBD, \"experimental\" features don't live in separate pre-release branches. Instead, they are merged into trunk behind feature flags or toggles.</p> <p>Key Characteristics: - Code exists in production builds but is hidden behind feature flags - Not exposed to end users - Version number increments via Semantic Release - Consumers don't see the unfinished feature</p> <p>Version Impact: PATCH or MINOR bump (depending on the change scope,  but feature remains hidden)</p>"},{"location":"tbd-feature-lifecycle/#2-production-stage","title":"2. Production Stage","text":"<p>Once the feature flag is enabled by default, the feature becomes \"production-ready.\"</p> <p>Key Characteristics: - Feature flag is flipped to enabled - Feature becomes visible and available to users - Full production deployment</p> <p>Version Impact: - MINOR bump if the feature is additive (new functionality) - MAJOR bump if it changes existing behavior (breaking change)</p>"},{"location":"tbd-feature-lifecycle/#3-deprecation-stage","title":"3. Deprecation Stage","text":"<p>Deprecation is communicated through documentation and release notes, not pre-release tags.</p> <p>Key Characteristics: - Code remains in trunk - Marked as deprecated in documentation - Warnings added to release notes - Backward-compatible but signals future removal</p> <p>Version Impact: MINOR version bump (backward-compatible change with deprecation warning)</p>"},{"location":"tbd-feature-lifecycle/#4-removal-stage","title":"4. Removal Stage","text":"<p>When the deprecated feature is removed, this constitutes a breaking change.</p> <p>Key Characteristics: - Deprecated feature is removed from trunk - CI/CD pipeline publishes the new version automatically - Breaking change for consumers still using the feature</p> <p>Version Impact: MAJOR version bump</p>"},{"location":"tbd-feature-lifecycle/#5-clean-up-stage-optional","title":"5. Clean-up Stage (Optional)","text":"<p>In some cases, the Removal stage only removes information from Public API documentation. The Clean-up stage removes the actual implementation.</p> <p>Key Characteristics: - Facilitates consumer migration - Removal stage: removes from public API docs (MAJOR bump) - Clean-up stage: removes actual implementation code</p> <p>Version Impact: MINOR bump (for implementation removal after public API removal)</p>"},{"location":"tbd-feature-lifecycle/#feature-lifecycle-flow-chart","title":"Feature Lifecycle Flow Chart","text":"<pre><code>graph TD\n    A[v1.2.3: Starting Version] --&gt; B[Experimental Stage]\n    B --&gt; |Feature behind flag&lt;br/&gt;PATCH/MINOR bump| C[v1.3.0: Feature in trunk&lt;br/&gt;hidden by flag]\n    C --&gt; D[Production Stage]\n    D --&gt; |Enable flag by default&lt;br/&gt;MINOR bump additive| E[v2.0.0: Feature enabled&lt;br/&gt;in production]\n    D --&gt; |Enable flag by default&lt;br/&gt;MAJOR bump breaking| E\n    E --&gt; F[Feature in Production]\n    F --&gt; F1[v9.9.0 Some other Developments]\n    F1 --&gt; G[Deprecation Stage]\n    G --&gt; |Mark as deprecated&lt;br/&gt;MINOR bump| H[v9.10.0: Feature deprecated&lt;br/&gt;documented warnings]\n    H --&gt; I[Deprecation period]\n    I --&gt; J[Removal Stage]\n    J --&gt; |Remove from API&lt;br/&gt;MAJOR bump| K[v10.0.0: Feature removed&lt;br/&gt;from public API]\n    K --&gt; M[Clean-up Stage]\n    M --&gt; |Remove implementation&lt;br/&gt;MINOR bump| N[v10.1.0: Implementation&lt;br/&gt;fully removed]\n    N --&gt; O[v10.1.0: Final Version]    \n\n    style B fill:#e1f5ff\n    style D fill:#c8e6c9\n    style G fill:#fff9c4\n    style J fill:#ffccbc\n    style M fill:#f8bbd0\n    style A fill:#f5f5f5\n    style O fill:#f5f5f5\n</code></pre>"},{"location":"tbd-feature-lifecycle/#example-version-progression","title":"Example Version Progression","text":"Stage Version Change Description Initial v1.2.3 Starting point Experimental v1.3.0 Feature added behind flag (MINOR) Production v2.0.0 Feature flag enabled (MAJOR - breaking behavior) Production (cont) v2.0.0-v9.9.0 Feature in use across several versions Deprecation v9.10.0 Feature marked deprecated (MINOR) Removal v10.0.0 Feature removed from public API (MAJOR) Clean-up v10.1.0 Implementation cleaned up (MINOR)"},{"location":"tbd-feature-lifecycle/#key-principles","title":"Key Principles","text":"<ol> <li>No Pre-release Branches: All work happens in trunk</li> <li>Feature Flags: Control feature visibility without code branching</li> <li>Semantic Versioning: Version bumps communicate impact to consumers</li> <li>Automated CI/CD: Pipeline handles version publishing</li> <li>Clear Communication: Documentation and release notes guide consumers    through lifecycle</li> </ol>"},{"location":"tbd-feature-lifecycle/#benefits-of-this-approach","title":"Benefits of This Approach","text":"<ul> <li>Continuous Integration: All code integrates continuously into trunk</li> <li>Reduced Merge Conflicts: No long-lived feature branches</li> <li>Flexible Rollout: Feature flags enable gradual rollouts</li> <li>Clear Versioning: Semantic versioning communicates breaking changes</li> <li>Consumer-Friendly: Deprecation warnings provide migration time</li> </ul>"},{"location":"decisions/","title":"Decisions","text":"<p>This directory contains decision records for {project name}.</p> <p>For new ADRs, please use adr-template.md as basis. More information on MADR is available at https://adr.github.io/madr/. General information about architectural decision records is available at https://adr.github.io/.</p>"},{"location":"decisions/0000-use-markdown-architectural-decision-records/","title":"Use Markdown Architectural Decision Records","text":"<ul> <li>Status: Accepted</li> <li>Date: 2025-10-19</li> </ul>"},{"location":"decisions/0000-use-markdown-architectural-decision-records/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>We want to record architectural decisions made in this project. Which format and structure should these records follow?</p>"},{"location":"decisions/0000-use-markdown-architectural-decision-records/#considered-options","title":"Considered Options","text":"<ul> <li>MADR 2.1.2 \u2013 The Markdown Architectural Decision Records</li> <li>Michael Nygard's template \u2013 The first incarnation of the term \"ADR\"</li> <li>Sustainable Architectural Decisions \u2013 The Y-Statements</li> <li>Other templates listed at https://github.com/joelparkerhenderson/architecture_decision_record</li> <li>Formless \u2013 No conventions for file format and structure</li> </ul>"},{"location":"decisions/0000-use-markdown-architectural-decision-records/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"MADR 2.1.2\", because</p> <ul> <li>Implicit assumptions should be made explicit.   Design documentation is important to enable people understanding the decisions later on.   See also A rational design process: How and why to fake it.</li> <li>The MADR format is lean and fits our development style.</li> <li>The MADR structure is comprehensible and facilitates usage &amp; maintenance.</li> <li>The MADR project is vivid.</li> <li>Version 2.1.2 is the latest one available when starting to document ADRs.</li> </ul>"},{"location":"decisions/0001-use-mkdocs-and-c4-diagrams/","title":"Use MkDocs and C4 Diagrams","text":"<ul> <li>Status: Accepted</li> <li>Deciders: iakovn</li> <li>Date: 2025-10-20</li> </ul>"},{"location":"decisions/0001-use-mkdocs-and-c4-diagrams/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>Need consistent high-level architecture documentation</p>"},{"location":"decisions/0001-use-mkdocs-and-c4-diagrams/#considered-options","title":"Considered Options","text":"<ul> <li>Confluence</li> <li>oneNote</li> <li>Mkdocs</li> </ul>"},{"location":"decisions/0001-use-mkdocs-and-c4-diagrams/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"Mkdocs\", because :</p> <ul> <li>Free</li> <li>no vendor lock-in</li> <li>standard markdown</li> <li>easy to unify with other dev processes.</li> </ul>"},{"location":"decisions/0002-adopt-trunk-based-development-as-branching-strategy/","title":"Adopt Trunk-Based Development as Branching Strategy","text":"<ul> <li>Status: Proposed</li> <li>Deciders: iakovn</li> <li>Date: 2025-10-22</li> </ul>"},{"location":"decisions/0002-adopt-trunk-based-development-as-branching-strategy/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>The current branching strategy involves long-lived feature branches and/or GitFlow-like workflows. This leads to delayed integration, increased merge conflicts, variability in code quality, and difficulty in maintaining continuous delivery practices. We need a branching strategy that supports rapid integration, enables continuous delivery, reduces overhead in merge and release processes, and fosters team collaboration.</p> <p>How should we manage our branching and integration workflow to optimize for speed, stability, and continuous delivery?</p>"},{"location":"decisions/0002-adopt-trunk-based-development-as-branching-strategy/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>Desire to reduce integration pain and merge conflicts</li> <li>Align development process with continuous delivery and DevOps practices</li> <li>Improve visibility of current code state</li> <li>Increase frequency of deployable increments</li> <li>Reduce process overhead and branch management complexity</li> </ul>"},{"location":"decisions/0002-adopt-trunk-based-development-as-branching-strategy/#considered-options","title":"Considered Options","text":"<ul> <li>GitFlow with long-lived branches</li> <li>Feature Branches with Pull Requests (short-lived)</li> <li>Trunk-Based Development (TBD)</li> <li>Fork-based development model</li> <li>Short-Lived Feature Branches</li> <li>Trunk-Based Development (Chosen)</li> <li>Fork-Based Model</li> </ul>"},{"location":"decisions/0002-adopt-trunk-based-development-as-branching-strategy/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"Trunk-Based Development\", because :</p> <ul> <li>Encourages continuous integration and small, incremental commits</li> <li>Supports CI/CD automation and faster releases</li> <li>Reduces merge complexity through short-lived branches or direct commits</li> <li>Enhances team collaboration by maintaining a single source of truth</li> <li>Aligns with modern DevOps and platform team best practices</li> </ul>"},{"location":"decisions/0002-adopt-trunk-based-development-as-branching-strategy/#positive-consequences","title":"Positive Consequences","text":"<ul> <li>Faster feedback cycles</li> <li>Reduced merge conflicts and integration problems</li> <li>Easier to maintain release readiness</li> <li>Encourages use of feature toggles and incremental delivery</li> </ul>"},{"location":"decisions/0002-adopt-trunk-based-development-as-branching-strategy/#negative-consequences","title":"Negative Consequences","text":"<ul> <li>Requires discipline and cultural shift in the team</li> <li>Feature toggles or \u201cdark releases\u201d may increase code complexity</li> <li>Some developers may resist abandoning long-lived feature branches</li> </ul>"},{"location":"decisions/0002-adopt-trunk-based-development-as-branching-strategy/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"decisions/0002-adopt-trunk-based-development-as-branching-strategy/#gitflow-with-long-lived-branches","title":"GitFlow with long-lived branches","text":"<p>Pros: Clear separation of release and development; suitable for long release cycles Cons: Heavy branching overhead, slow feedback, incompatible with continuous delivery</p>"},{"location":"decisions/0002-adopt-trunk-based-development-as-branching-strategy/#short-lived-feature-branches","title":"Short-Lived Feature Branches","text":"<p>Pros: Familiar workflow; allows code review before merging Cons: Still prone to integration delays if branches live too long</p>"},{"location":"decisions/0002-adopt-trunk-based-development-as-branching-strategy/#trunk-based-development-chosen","title":"Trunk-Based Development (Chosen)","text":"<p>Pros: Fast integration; optimized for CI/CD; reduces overhead; supports continuous delivery Cons: Requires strong engineering practices (e.g., feature toggles, automated tests)</p>"},{"location":"decisions/0002-adopt-trunk-based-development-as-branching-strategy/#fork-based-model","title":"Fork-Based Model","text":"<p>Pros: Good for open-source and distributed contributors Cons: High overhead and not optimized for internal team velocity</p>"},{"location":"decisions/0002-adopt-trunk-based-development-as-branching-strategy/#links","title":"Links","text":"<ul> <li>https://trunkbaseddevelopment.com/</li> <li>feature lifecycle</li> <li>Internal CI/CD pipeline documentation (to be updated)</li> </ul>"},{"location":"decisions/adr-template/","title":"{short title of solved problem and solution}","text":"<ul> <li>Status:</li> <li>Deciders:</li> <li>Date:</li> </ul>"},{"location":"decisions/adr-template/#context-and-problem-statement","title":"Context and Problem Statement","text":"<p>{Describe the context and problem statement, e.g., in free form using two to three sentences or in the form of an illustrative story.  You may want to articulate the problem in form of a question and add links to collaboration boards or issue management systems.}</p>"},{"location":"decisions/adr-template/#decision-drivers","title":"Decision Drivers","text":"<ul> <li>{decision driver 1, e.g., a force, facing concern, \u2026}</li> <li>{decision driver 2, e.g., a force, facing concern, \u2026}</li> <li>\u2026 </li> </ul>"},{"location":"decisions/adr-template/#considered-options","title":"Considered Options","text":"<ul> <li>{title of option 1}</li> <li>{title of option 2}</li> <li>{title of option 3}</li> <li>\u2026 </li> </ul>"},{"location":"decisions/adr-template/#decision-outcome","title":"Decision Outcome","text":"<p>Chosen option: \"{title of option 1}\", because {justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force {force} | \u2026 | comes out best (see below)}.</p>"},{"location":"decisions/adr-template/#positive-consequences","title":"Positive Consequences","text":"<ul> <li>{e.g., improvement of one or more desired qualities, \u2026}</li> <li>\u2026</li> </ul>"},{"location":"decisions/adr-template/#negative-consequences","title":"Negative Consequences","text":"<ul> <li>{e.g., compromising one or more desired qualities, \u2026}</li> <li>\u2026</li> </ul>"},{"location":"decisions/adr-template/#validation","title":"Validation","text":"<p>{describe how the implementation of/compliance with the ADR is validated. E.g., by a review or an ArchUnit test}</p>"},{"location":"decisions/adr-template/#pros-and-cons-of-the-options","title":"Pros and Cons of the Options","text":""},{"location":"decisions/adr-template/#title-of-option-1","title":"{title of option 1}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> </ul> <ul> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026 </li> </ul>"},{"location":"decisions/adr-template/#title-of-other-option","title":"{title of other option}","text":"<p>{example | description | pointer to more information | \u2026}</p> <ul> <li>Good, because {argument a}</li> <li>Good, because {argument b}</li> <li>Neutral, because {argument c}</li> <li>Bad, because {argument d}</li> <li>\u2026</li> </ul>"},{"location":"decisions/adr-template/#more-information","title":"More Information","text":"<p>{You might want to provide additional evidence/confidence for the decision outcome here and/or  document the team agreement on the decision and/or  define when this decision when and how the decision should be realized and if/when it should be re-visited and/or  how the decision is validated.  Links to other decisions and resources might here appear as well.}</p>"},{"location":"diagrams/architecture/","title":"Generic Architecture Diagrams","text":""},{"location":"diagrams/architecture/#architectural-diagram-inline-example","title":"Architectural Diagram Inline Example","text":"<p>This may be practical for smaller diagrams.</p> <pre>d1a3c7a9435622a7c735975a075c2052ba5d6f161df8c3c6c3cd2ecc283ac60fee2a0f99768cd999dd7f1100cb805c38a1222a8b4115d5c9cbf8597afc57f399</pre>"}]}